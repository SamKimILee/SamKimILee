<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="app.labs.admin.dao.AdminRepository">

    <!-- 로그인 쿼리 -->
    <select id="findById" parameterType="string" resultType="map">
        SELECT ADMIN_ID, ADMIN_PWD FROM ADMIN
        WHERE ADMIN_ID = #{id}
    </select>

    <!-- 특정 회원 ID로 회원 정보 조회 쿼리 -->
    <select id="getMemberList" parameterType="java.util.Map" resultType="app.labs.register.model.Member">
        SELECT * FROM MEMBER
        <where>
            <if test="memberId != null and memberId != ''">
                MEMBER_ID LIKE '%' || #{memberId} || '%'
            </if>
            <if test="memberName != null and memberName != ''">
                AND MEMBER_NAME LIKE '%' || #{memberName} || '%'
            </if>
        </where>
        ORDER BY MEMBER_STATUS
    </select>

    <!-- 회원 상태 수정 -->
    <update id="updateMemberStatus">
        UPDATE MEMBER
        SET MEMBER_STATUS = #{memberStatus}
        WHERE MEMBER_ID = #{memberId}
    </update>

    <!-- 회원 통계 관련 -->
    <select id="getMemberStatsByYear" resultType="map">
        SELECT EXTRACT(YEAR FROM member_signup_date) as year, 
               COUNT(*) as count
        FROM member
        GROUP BY EXTRACT(YEAR FROM member_signup_date)
        ORDER BY year
    </select>

    <select id="getMemberStatsByMonth" resultType="map">
        SELECT TO_CHAR(member_signup_date, 'YYYY') as year,
               TO_CHAR(member_signup_date, 'YYYY-MM') as month, 
               COUNT(*) as count
        FROM member
        WHERE EXTRACT(YEAR FROM member_signup_date) = EXTRACT(YEAR FROM SYSDATE)
        GROUP BY TO_CHAR(member_signup_date, 'YYYY'), TO_CHAR(member_signup_date, 'YYYY-MM')
        ORDER BY month
    </select>

    <select id="getMemberStatsByDay" resultType="map">
        SELECT TO_CHAR(member_signup_date, 'YYYY-MM') as month,
               TO_CHAR(member_signup_date, 'YYYY-MM-DD') as day, 
               COUNT(*) as count
        FROM member
        GROUP BY TO_CHAR(member_signup_date, 'YYYY-MM'), TO_CHAR(member_signup_date, 'YYYY-MM-DD')
        ORDER BY day
    </select>
    
    <!-- 게시글 목록 조회 -->
    <select id="getBoardList" resultType="app.labs.board.model.Board">
        SELECT 
            board_id AS boardId,
            board_title AS boardTitle,
            board_category AS boardCategory,
            board_offensive AS boardOffensive,
            board_report AS boardReport,
            member_id AS memberId,
            TO_CHAR(board_date, 'YYYY-MM-DD HH24:MI:SS') AS boardDate<!-- ,
            TO_CHAR(board_update, 'YYYY-MM-DD HH24:MI:SS') AS boardUpdate -->
        FROM board
        ORDER BY board_date DESC
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="getBoardDetail" parameterType="int" resultType="app.labs.board.model.Board">
        SELECT 
            board_id AS boardId,
            board_title AS boardTitle,
            board_category AS boardCategory,
            board_content AS boardContent,
            board_offensive AS boardOffensive,
            board_report AS boardReport,
            member_id AS memberId,
            TO_CHAR(board_date, 'YYYY-MM-DD HH24:MI:SS') AS boardDate<!-- ,
            TO_CHAR(board_update, 'YYYY-MM-DD HH24:MI:SS') AS boardUpdate -->
        FROM board
        WHERE board_id = #{boardId}
    </select>

    <!-- 게시글 상태 수정 (단일) -->
    <update id="updateBoardStatus" parameterType="map">
        UPDATE board 
        SET 
            board_offensive = #{boardOffensive},
            board_report = #{boardReport}<!-- ,
            board_update = CURRENT_TIMESTAMP -->
        WHERE board_id = #{boardId}
    </update>

    <!-- 감정 통계 관련 -->
    <!-- 당일 감정 통계 -->
    <select id="getDailyEmoDiary" resultType="map">
        SELECT DIARY_EMOTION, COUNT(DIARY_EMOTION) AS COUNT_EMOTION 
        FROM DIARY
        WHERE TRUNC(DIARY_DATE) = TRUNC(SYSDATE)
        GROUP BY DIARY_EMOTION
    </select>

    <!-- 전체 기간 감정 통계 -->
    <select id="getTotalEmoDiary" resultType="map">
        SELECT TRUNC(DIARY_DATE) AS DIARY_DATE, DIARY_EMOTION, COUNT(DIARY_EMOTION) AS COUNT_EMOTION 
        FROM DIARY
        GROUP BY TRUNC(DIARY_DATE), DIARY_EMOTION
        ORDER BY DIARY_DATE
    </select>

    <!-- 당일 게시판 감정 통계 -->
    <select id="getDailyEmoBoard" resultType="map">
        SELECT BOARD_CATEGORY, COUNT(BOARD_CATEGORY) AS COUNT_CATEGORY 
        FROM BOARD
        WHERE TRUNC(BOARD_DATE) = TRUNC(SYSDATE)
        GROUP BY BOARD_CATEGORY
    </select>

    <!-- 전체 기간 게시판 감정 통계 -->
    <select id="getTotalEmoBoard" resultType="map">
        SELECT TRUNC(BOARD_DATE) AS BOARD_DATE, BOARD_CATEGORY, COUNT(BOARD_CATEGORY) AS COUNT_CATEGORY 
        FROM BOARD
        GROUP BY TRUNC(BOARD_DATE), BOARD_CATEGORY
        ORDER BY BOARD_DATE
    </select>

    <!-- 이벤트 목록 조회 -->
    <select id="getEvents" resultType="app.labs.admin.model.Events">
        SELECT EVENT_ID, EVENT_NAME, EVENT_DESCRIPTION, 
               TO_CHAR(EVENT_CREATED_AT, 'YYYY-MM-DD HH24:MI:SS') AS EVENT_CREATED_AT
        FROM EVENTS
        ORDER BY EVENT_ID
    </select>

    <insert id="insertEvent" parameterType="app.labs.admin.model.Events">
        INSERT INTO EVENTS (EVENT_NAME, EVENT_DESCRIPTION)
        VALUES (#{eventName}, #{eventDescription})
    </insert>

    <update id="updateEvent" parameterType="app.labs.admin.model.Events">
        UPDATE EVENTS 
        SET EVENT_NAME = #{eventName},
            EVENT_DESCRIPTION = #{eventDescription}
        WHERE EVENT_ID = #{eventId}
    </update>

    <delete id="deleteEvent" parameterType="int">
        DELETE FROM EVENTS WHERE EVENT_ID = #{eventId}
    </delete>

    <!-- 이벤트 통계 관련 -->
    <select id="getPastEventStats" resultType="map">
        WITH DATE_SERIES (SUCCESS_DATE) AS (
    	SELECT 
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY') AS SUCCESS_DATE
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM') AS SUCCESS_DATE
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS SUCCESS_DATE
            </otherwise>
        </choose>
	    FROM DUAL
	    UNION ALL
	    SELECT
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(SUCCESS_DATE, 'YYYY') + INTERVAL '1' YEAR, 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(SUCCESS_DATE, 'YYYY-MM') + INTERVAL '1' MONTH, 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(SUCCESS_DATE, 'YYYY-MM-DD') + INTERVAL '1' DAY, 'YYYY-MM-DD')
            </otherwise>
        </choose>
	    FROM DATE_SERIES DS
	    WHERE 
	        SUCCESS_DATE &lt;
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD')
            </otherwise>
        </choose>
		)
		SELECT 
		    DS.SUCCESS_DATE,
		    COALESCE(COUNT(EJ.EVENT_ID), 0) AS EVENT_COUNT
		FROM DATE_SERIES DS
		LEFT JOIN EVENT_JOIN EJ 
		    ON TO_CHAR(EJ.SUCCESS_DATE, 
        <choose>
            <when test="periodUnit == 'year'">
                'YYYY'
            </when>
            <when test="periodUnit == 'month'">
                'YYYY-MM'
            </when>
            <otherwise>
                'YYYY-MM-DD'
            </otherwise>
        </choose>
	    ) = DS.SUCCESS_DATE
	    AND EJ.EVENT_ID = #{eventId}
	GROUP BY DS.SUCCESS_DATE
	ORDER BY DS.SUCCESS_DATE

    </select>
    
    <select id="getTodayEventStats" resultType="map">
        SELECT 
            TO_CHAR(SUCCESS_DATE, 'YYYY-MM-DD') AS SUCCESS_DATE,
            COUNT(EVENT_ID) AS EVENT_COUNT
            ,(SELECT COUNT(MEMBER_ID) FROM MEMBER) AS CNT_MEMBER
        FROM EVENT_JOIN
        WHERE EVENT_ID = #{eventId}
        AND TO_CHAR(SUCCESS_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
        GROUP BY TO_CHAR(SUCCESS_DATE, 'YYYY-MM-DD')
        ORDER BY SUCCESS_DATE
    </select>

    <select id="getTotalEventStats" resultType="map">
        WITH QUARTERS AS (
            SELECT DISTINCT
                TO_CHAR(ADD_MONTHS(TO_DATE('2024-01-01', 'YYYY-MM-DD'), (LEVEL-1)*3), 'YYYY') || '년 ' ||
                CEIL(TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE('2024-01-01', 'YYYY-MM-DD'), (LEVEL-1)*3), 'MM'))/3) || '분기' AS YEAR
            FROM DUAL
            CONNECT BY LEVEL &lt; 
                (CEIL(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE, 'Q'), 'MM'))/3) +
                (TO_NUMBER(TO_CHAR(TRUNC(SYSDATE, 'Q'), 'YYYY')) - 2024) * 4)
        )
        SELECT 
            E.EVENT_NAME,
            Q.YEAR,
            COUNT(ES.EVENT_ID) AS EVENT_COUNT
        FROM 
            EVENTS E
            LEFT JOIN QUARTERS Q ON 1=1
            LEFT JOIN EVENT_JOIN ES ON E.EVENT_ID = ES.EVENT_ID
                AND TO_CHAR(ES.SUCCESS_DATE, 'YYYY') || '년 ' || 
                CEIL(TO_NUMBER(TO_CHAR(ES.SUCCESS_DATE, 'MM'))/3) || '분기' = Q.YEAR
                AND ES.SUCCESS_DATE &gt;= TO_DATE('2024-01-01', 'YYYY-MM-DD')
                AND ES.SUCCESS_DATE &lt; TRUNC(SYSDATE, 'Q')
        GROUP BY 
            E.EVENT_NAME,
            Q.YEAR
        ORDER BY 
            E.EVENT_NAME,
            Q.YEAR
    </select>

    <select id="getSignUpStats" resultType="map">
        WITH DATE_SERIES (SIGNUP_DATE) AS (
    	SELECT 
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY') AS SIGNUP_DATE
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM') AS SIGNUP_DATE
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS SIGNUP_DATE
            </otherwise>
        </choose>
	    FROM DUAL
	    UNION ALL
	    SELECT
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(SIGNUP_DATE, 'YYYY') + INTERVAL '1' YEAR, 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(SIGNUP_DATE, 'YYYY-MM') + INTERVAL '1' MONTH, 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(SIGNUP_DATE, 'YYYY-MM-DD') + INTERVAL '1' DAY, 'YYYY-MM-DD')
            </otherwise>
        </choose>
	    FROM DATE_SERIES DS
	    WHERE 
	        SIGNUP_DATE &lt;
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD')
            </otherwise>
        </choose>
		)
		SELECT 
		    DS.SIGNUP_DATE,
		    COALESCE(COUNT(M.MEMBER_ID), 0) AS MEMBER_COUNT
		FROM DATE_SERIES DS
		LEFT JOIN MEMBER M 
		    ON TO_CHAR(M.MEMBER_SIGNUP_DATE, 
        <choose>
            <when test="periodUnit == 'year'">
                'YYYY'
            </when>
            <when test="periodUnit == 'month'">
                'YYYY-MM'
            </when>
            <otherwise>
                'YYYY-MM-DD'
            </otherwise>
        </choose>
	    ) = DS.SIGNUP_DATE
        GROUP BY DS.SIGNUP_DATE
        ORDER BY DS.SIGNUP_DATE
    </select>

    <select id="getDropOutStats" resultType="map">
        WITH DATE_SERIES (LAST_LOGIN) AS (
    	SELECT 
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY') AS LAST_LOGIN
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM') AS LAST_LOGIN
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS LAST_LOGIN
            </otherwise>
        </choose>
	    FROM DUAL
	    UNION ALL
	    SELECT
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(LAST_LOGIN, 'YYYY') + INTERVAL '1' YEAR, 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(LAST_LOGIN, 'YYYY-MM') + INTERVAL '1' MONTH, 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(LAST_LOGIN, 'YYYY-MM-DD') + INTERVAL '1' DAY, 'YYYY-MM-DD')
            </otherwise>
        </choose>
	    FROM DATE_SERIES DS
	    WHERE 
	        LAST_LOGIN &lt;
        <choose>
            <when test="periodUnit == 'year'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY')
            </when>
            <when test="periodUnit == 'month'">
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM')
            </when>
            <otherwise>
                TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYY-MM-DD')
            </otherwise>
        </choose>
		)
		SELECT 
		    DS.LAST_LOGIN,
		    COALESCE(COUNT(M.MEMBER_ID), 0) AS MEMBER_COUNT
		FROM DATE_SERIES DS
		LEFT JOIN MEMBER M 
		    ON TO_CHAR(M.MEMBER_LAST_LOGIN, 
        <choose>
            <when test="periodUnit == 'year'">
                'YYYY'
            </when>
            <when test="periodUnit == 'month'">
                'YYYY-MM'
            </when>
            <otherwise>
                'YYYY-MM-DD'
            </otherwise>
        </choose>
	    ) = DS.LAST_LOGIN
        AND M.MEMBER_STATUS = 'REMOVED'
        GROUP BY DS.LAST_LOGIN
        ORDER BY DS.LAST_LOGIN
    </select>

    <select id="getVisitorCount" resultType="int">
        SELECT COUNT(*) FROM MEMBER
        WHERE TO_CHAR(MEMBER_LAST_LOGIN, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
    </select>

    <select id="getTodayEventsStats" resultType="map">
        SELECT 
            E.EVENT_ID,
            E.EVENT_NAME,
            COUNT(EJ.EVENT_ID) AS EVENT_COUNT
        FROM EVENTS E
        JOIN EVENT_JOIN EJ ON E.EVENT_ID = EJ.EVENT_ID
        WHERE TO_CHAR(EJ.SUCCESS_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
        GROUP BY E.EVENT_ID, E.EVENT_NAME
        ORDER BY E.EVENT_ID
    </select>
</mapper>
