<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="app.labs.register.dao.MemberRepository">
    <!-- 회원 정보 업데이트 쿼리 -->
    <!-- <update id="updateMember" parameterType="map">
        UPDATE MEMBER
        SET MEMBER_NAME = #{userName}, 
            MEMBER_EMAIL = #{email}, 
            MEMBER_PHONE = #{phoneNumber}
        WHERE MEMBER_ID = #{userId}
    </update> -->

    <!-- 회원 정보 삽입 쿼리 -->
    <insert id="insertMember" parameterType="app.labs.register.model.Member">
        INSERT INTO MEMBER (
            MEMBER_ID, MEMBER_PWD, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_EMAIL, MEMBER_BIRTHDATE
        )
        VALUES (
            #{memberId}, #{memberPwd}, #{memberName}, #{memberNickname}, #{memberEmail}, #{memberBirthdate}
        )
    </insert>

    <!-- 특정 회원 ID로 회원 정보 조회 쿼리 -->
    <select id="findByUserId" parameterType="string" resultType="app.labs.register.model.Member">
        SELECT MEMBER_ID, MEMBER_PWD, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_STATUS
        FROM MEMBER
        WHERE MEMBER_ID = #{userId}
    </select>

    <!-- 로그인 쿼리 -->
    <select id="loginMember" parameterType="app.labs.register.model.Member" resultType="app.labs.register.model.Member">
        SELECT MEMBER_ID, MEMBER_PWD, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PHONE
        FROM MEMBER
        WHERE MEMBER_ID = #{userId}
        AND MEMBER_PWD = #{userPwd}
    </select>

    <!-- 이메일 또는 전화번호로 회원 정보 조회 쿼리 -->
    <select id="findByEmailOrPhone" resultType="app.labs.register.model.Member">
        SELECT * FROM MEMBER
        WHERE (MEMBER_EMAIL = #{emailOrPhone} OR MEMBER_phone = #{emailOrPhone})
    </select>
    
    <!-- 아이디 중복 체크 쿼리 -->
    <select id="existsByUserId" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM MEMBER WHERE MEMBER_ID = #{memberId}
    </select>

    <!-- 마지막 로그인 시간 업데이트 쿼리 -->
    <update id="updateLastLogin" parameterType="String">
        UPDATE MEMBER SET MEMBER_LAST_LOGIN = SYSDATE WHERE MEMBER_ID = #{memberId}
    </update>

    <!-- 참석 이벤트 추가 쿼리 -->
    <insert id="addAttendJoin" parameterType="String">
        INSERT INTO EVENT_JOIN (JOIN_ID, MEMBER_ID, EVENT_ID) VALUES (EVENT_JOIN_SEQ.NEXTVAL, #{memberId}, 1)
    </insert>

    <!-- 참석 이벤트 조회 쿼리 -->
    <select id="checkAttendJoin" resultType="map">
        SELECT * FROM EVENT_JOIN 
        WHERE MEMBER_ID = #{memberId} 
        AND 
        TRUNC(SUCCESS_DATE) = TRUNC(SYSDATE)
    </select>

    <!-- 닉네임 중복 체크 쿼리 -->
    <select id="existsByMemberNickname" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM MEMBER WHERE MEMBER_NICKNAME = #{memberNickname}
    </select>

    <!-- 모든 회원 조회 쿼리 -->
    <select id="getMember" resultType="app.labs.register.model.Member">
        SELECT MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_EMAIL
        , MEMBER_PHONE
        , MEMBER_PROFILE
        , MEMBER_BIRTHDATE
        , MEMBER_ADDRESS
        FROM MEMBER
        WHERE MEMBER_ID = #{memberId}
    </select>

    <!-- 회원 정보 업데이트 쿼리 -->
    <update id="updateMember" parameterType="map">
        UPDATE MEMBER
        SET 
            <if test="memberProfile != null">
                MEMBER_PROFILE = #{memberProfile},
            </if>
            MEMBER_NAME = #{memberName}, 
            MEMBER_BIRTHDATE = #{memberBirthdate},
            MEMBER_NICKNAME = #{memberNickname},
            MEMBER_EMAIL = #{memberEmail}, 
            MEMBER_PWD = #{memberPwd},
            MEMBER_PHONE = #{memberPhone},
            MEMBER_ADDRESS = #{memberAddress}
        WHERE MEMBER_ID = #{memberId}
    </update>
</mapper>
